var cursors;
var character;
var tiles;
var map;
var backgroundLayer;
var blockedLayer;
var objectLayer;

var randItem;
var itemListLength;

var gameObjects = [];

var itemHolder;

var removedChests = [];

var inventory;
var confirmationButton;
var inventoryText = ["one","two","three","four","five","six","seven","eight","nine","ten","one2","two2","three2","four2","five2","six2","seven2","eight2","nine2","ten2","one3","two3","three3","four3","five3","six3","seven3","eight3","nine3","ten3","one4","two4","three4","four4","five4","six4","seven4","eight4","nine4","ten4"];

var charInventory = [];

var doors;
var enemySpawns;
var chests;

var dungeonOnePos = {x:32,y:34};

var dungeonOneState = {
  preload: function(){
    game.load.tilemap('dungeon_one', '<%= asset_path "dungeon_one.json" %>', null, Phaser.Tilemap.TILED_JSON);
    game.load.image('game_tiles', '<%= asset_path "game_tiles.png" %>');
    game.load.spritesheet('char','<%= asset_path "character_sprite.png" %>',30,30);
    game.load.spritesheet('tiles', '<%= asset_path "game_tiles.png" %>',32,32);    
  },
  create: function(){

    map = game.add.tilemap('dungeon_one');

    game.cache.currentGameState = 'dungeonOneState';
    // game.cache.nextGameState = 'dungeonOneState';

    map.addTilesetImage('game_tiles','game_tiles');

    backgroundLayer = map.createLayer('backgroundLayer');
    blockedLayer = map.createLayer('blockedLayer');

    game.physics.startSystem(Phaser.Physics.ARCADE);

    map.setCollisionBetween(1,2000,true,'blockedLayer');

    inventory = game.input.keyboard.addKey(Phaser.Keyboard.Z);
    inventory.onDown.add(changeInventoryState, this);

    confirmationButton = game.input.keyboard.addKey(Phaser.Keyboard.X);
    console.log(doors);

      doors = game.add.group();
      enemySpawns = game.add.group();
      chests = game.add.group();
    if(chests.children.length == 0){

      map.objects['objectLayer'].forEach(function(element){
        if(element.properties.type == "door"){
          doors.create(element.x, (element.y - 32), 'tiles', element.properties.sprite);
        }
        if(element.properties.type == "enemy_spawn"){
          enemySpawns.create(element.x, (element.y - 32), 'tiles', element.properties.sprite);
        }
        if(element.properties.type == "chest"){
          chests.create(element.x, (element.y - 32), 'tiles', element.properties.sprite).isDestroyed = false;
        }
      });

      console.log(map.objects['objectLayer'].length);

      doors.enableBody = true;
      game.physics.enable(doors);
      doors.immovable = true;

      enemySpawns.enableBody = true;
      game.physics.enable(enemySpawns);
      enemySpawns.immovable = true;

      chests.enableBody = true;
      game.physics.enable(chests);
      chests.immovable = true;
    }
    else{
      console.log("Group was saved.");
    }
    // else{
    //   doors = game.add.group();
    //   enemySpawns = game.add.group();
    //   chests = game.add.group();

    //   map.objects['objectLayer'].forEach(function(element){
    //     if(element.properties.type == "door"){
    //       doors.create(element.x, (element.y - 32), 'tiles', element.properties.sprite);
    //     }
    //     if(element.properties.type == "enemy_spawn"){
    //       enemySpawns.create(element.x, (element.y - 32), 'tiles', element.properties.sprite);
    //     }
    //     if(element.properties.type == "chest"){
    //       itemHolder = chests.create(element.x, (element.y - 32), 'tiles', element.properties.sprite).isDestroyed = false;
    //       for(var i = 0; i < removedChests.length; i++){
    //         if(removedChests[i].worldPosition.x == element.x && removedChests[i].worldPosition.y == element.y){
    //           itemHolder.kill();
    //         }
    //       }
    //     }
    //   });

    //   console.log(map.objects['objectLayer'].length);

    //   doors.enableBody = true;
    //   game.physics.enable(doors);
    //   doors.immovable = true;

    //   enemySpawns.enableBody = true;
    //   game.physics.enable(enemySpawns);
    //   enemySpawns.immovable = true;

    //   chests.enableBody = true;
    //   game.physics.enable(chests);
    //   chests.immovable = true;
    // }  


    if(dungeonOnePos){
      character = new Character(dungeonOnePos.x, dungeonOnePos.y, game,"tester","Warrior",200,20);
    }

    cursors = game.input.keyboard.createCursorKeys();
  },
  update: function(){

    game.physics.arcade.collide(blockedLayer,character.player);
    game.physics.arcade.overlap(chests,character.player,openChest, null, this);
    game.physics.arcade.overlap(doors, character.player, changeWorldState, null, this);
    //game.physics.arcade.overlap(enemySpawns, character.player, changeBattleState, null, this);

    character.moveCharacter();
  },
  shutdown: function(){

    removedChests = removedChests;

    if(character.player.position.y < 32){
      dungeonOnePos.x = character.player.position.x;
      dungeonOnePos.y = character.player.position.y + 10;
    }
    else{
      dungeonOnePos.x = character.player.position.x;
      dungeonOnePos.y = character.player.position.y;
    }
  }
};

var openChest = function(player, chest){
  if(confirmationButton.isDown){
    chest.kill();
    console.log(chest.isDestroyed);
    chest.isDestroyed = true;
    removedChests.push(chest);
    chests.remove(chest);
    console.log(chests);
    // // itemListLength = game.cache.gameItems.length;
    // // randItem = Math.floor(Math.random() * itemListLength)

    // // charInventory.push(game.cache.gameItems[randItem]);
    itemListLength = inventoryText.length;
    randItem = Math.floor(Math.random() * itemListLength)

    charInventory.push(inventoryText[randItem]);

    game.cache.charInventory = charInventory;

    console.log("tried to open");
  }
}

var changeBattleState = function(enemySpawns, player){
  game.state.start('battleState');
}

var changeWorldState = function(doors, player){
  game.cache.nextGameState = 'worldMap';
  game.state.start('worldMap');
}

var changeInventoryState = function(){
  console.log(chests);
  game.state.start('inventoryState');
}