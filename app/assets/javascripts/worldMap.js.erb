var cursors;
var character;
var tiles;
var map;
var backgroundLayer;
var blockedLayer;
var objectLayer;
var doors;
var enemySpawns;

var door;

var worldMap = {
  preload: function(){
    game.load.image('star','<%= asset_path "star.png" %>');
    game.load.tilemap('wolrd_map', '<%= asset_path "world_map.json" %>', null, Phaser.Tilemap.TILED_JSON);
    game.load.image('game_tiles', '<%= asset_path "game_tiles.png" %>');
    game.load.spritesheet('tiles', '<%= asset_path "game_tiles.png" %>',32,32);
    game.load.spritesheet('dude','<%= asset_path "dude.png" %>',32,48);
  },
  create: function(){

    map = game.add.tilemap('wolrd_map');

    map.addTilesetImage('game_tiles','game_tiles');

    backgroundLayer = map.createLayer('backgroundLayer');
    blockedLayer = map.createLayer('blockedLayer');
    //objectLayer = map.createLayer('objectLayer');

    game.physics.startSystem(Phaser.Physics.ARCADE);

    map.setCollisionBetween(1,2000,true,'blockedLayer');

    doors = game.add.group();
    enemySpawns = game.add.group();

    map.objects['objectLayer'].forEach(function(element){
      if(element.properties.type == "door"){
        doors.create(element.x, (element.y - 32), 'tiles', element.properties.sprite);
        
      }
      if(element.properties.type == "enemy_spawn"){
        enemySpawns.create(element.x, (element.y - 32), 'tiles', element.properties.sprite);
      }
    });

    doors.enableBody = true;
    game.physics.enable(doors);
    doors.immovable = true;

    enemySpawns.enableBody = true;
    game.physics.enable(enemySpawns);
    enemySpawns.immovable = true;

    //console.log(game.cache.characterData);

    if(game.cache.player_position){

      character = new Character(game.cache.player_position.x,game.cache.player_position.y,game,"tester","Warrior",200,20);
    }
    else{
      character = new Character(200,200,game,"tester","Warrior",200,20);
    }

    cursors = game.input.keyboard.createCursorKeys();

  },
  update: function(){
    game.physics.arcade.collide(blockedLayer,character.player);
    game.physics.arcade.overlap(doors, character.player, changeDungeonOneState, null, this);
    //game.physics.arcade.overlap(enemySpawns, character.player, changeBattleState, null, this);
    character.moveCharacter();
  }
};

var changeBattleState = function(enemySpawns, player){
    game.cache.currentGameState = 'worldMap';
    game.state.start('battleState');
}

var changeDungeonOneState = function(doors, player){
  game.cache.player_position = player.position;
  //console.log(player.position);
  game.state.start('dungeonOneState');
}