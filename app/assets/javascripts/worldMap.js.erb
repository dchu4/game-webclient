var cursors;
var character;
var tiles;
var map;
var backgroundLayer;
var blockedLayer;
var objectLayer;
var doors;
var enemySpawns;
var homes;

var charPos = {x: 700, y: 383};

var inventory;

var charImage;

var dungeonOne;
var dungeonTwo;
var dungeonThree;

var gameItems = [];
var charsArray = [];
var enemysArray = [];

var worldMap = {
  preload: function(){
    game.load.tilemap('world_map', '<%= asset_path "world_map.json" %>', null, Phaser.Tilemap.TILED_JSON);
    game.load.image('game_tiles', '<%= asset_path "game_tiles.png" %>');
    game.load.spritesheet('tiles', '<%= asset_path "game_tiles.png" %>',32,32);
    game.load.spritesheet('char','<%= asset_path "character_sprite.png" %>',30,30);
  },
  create: function(){
    gameItems = game.cache.gameItems;
    charsArray = game.cache.charactersArray;
    enemysArray = game.cache.enemysArray;

    console.log(gameItems);
    console.log(charsArray);
    console.log(enemysArray);

    game.cache.currentGameState = 'worldMap';
    game.cache.nextGameState = 'worldMap';

    map = game.add.tilemap('world_map');

    map.addTilesetImage('game_tiles','game_tiles');

    backgroundLayer = map.createLayer('backgroundLayer');
    blockedLayer = map.createLayer('blockedLayer');

    game.physics.startSystem(Phaser.Physics.ARCADE);

    map.setCollisionBetween(1,2000,true,'blockedLayer');

    inventory = game.input.keyboard.addKey(Phaser.Keyboard.Z);
    inventory.onDown.add(changeInventoryState, this);

    doors = game.add.group();
    enemySpawns = game.add.group();
    homes = game.add.group();

    map.objects['objectLayer'].forEach(function(element){
      if(element.properties.type == "door"){
        doors.create(element.x, (element.y - 32), 'tiles', element.properties.sprite);
        
      }
      if(element.properties.type == "home"){
        homes.create(element.x, (element.y - 32), 'tiles', element.properties.sprite);
        
      }
      if(element.properties.type == "enemy_spawn"){
        enemySpawns.create(element.x, (element.y - 32), 'tiles', element.properties.sprite);
      }
    });


    doors.enableBody = true;
    game.physics.enable(doors);
    doors.immovable = true;

    dungeonOne = doors.children[0];
    dungeonTwo = doors.children[1];
    dungeonThree = doors.children[2];

    // console.log(doors.children);

    enemySpawns.enableBody = true;
    game.physics.enable(enemySpawns);
    enemySpawns.immovable = true;


    if(charPos){
      character = new Character(charPos.x,charPos.y,game,"tester","Warrior",200,20);

    }

    cursors = game.input.keyboard.createCursorKeys();

  },
  update: function(){
    game.physics.arcade.collide(blockedLayer,character.player);
    game.physics.arcade.overlap(dungeonOne, character.player, changeDungeonOneState, null, this);
    game.physics.arcade.overlap(dungeonThree, character.player, changeDungeonTwoState, null, this);
    game.physics.arcade.overlap(dungeonTwo, character.player, changeDungeonThreeState, null, this);

    game.physics.arcade.overlap(enemySpawns, character.player, changeBattleState, null, this);
    
    character.moveCharacter();
  },
  shutdown: function(){

    if(game.cache.nextGameState == 'dungeonOneState'){
      if(character.player.position.x < 32){
        charPos.x = character.player.position.x + 15;
        charPos.y = character.player.position.y;
      }
    }
    else if(game.cache.nextGameState == 'dungeonTwoState'){
      if(character.player.position.x < 32){
        charPos.x = character.player.position.x + 15;
        charPos.y = character.player.position.y;
      }
      if(character.player.position.y > 600){
        charPos.x = character.player.position.x;
        charPos.y = character.player.position.y - 20;
      }
    }
    else if(game.cache.nextGameState == 'dungeonThreeState'){
      if(character.player.position.x < 256){
        charPos.x = character.player.position.x + 15;
        charPos.y = character.player.position.y;
      }
      if(character.player.position.y < 32){
        charPos.x = character.player.position.x;
        charPos.y = character.player.position.y + 15;
      }
    }
    else if(game.cache.nextGameState == 'worldMap'){
      charPos.x = character.player.position.x;
      charPos.y = character.player.position.y;
    }
  }
};

var changeBattleState = function(enemySpawns, player){
    game.state.start('battleState');
}

var changeDungeonOneState = function(dungeonOne, player){
  game.cache.nextGameState = 'dungeonOneState';
  game.state.start('dungeonOneState');
}

var changeDungeonTwoState = function(dungeonTwo, player){
  game.cache.nextGameState = 'dungeonTwoState';
  game.state.start('dungeonTwoState');
}

var changeDungeonThreeState = function(dungeonThree, player){
  game.cache.nextGameState = 'dungeonThreeState';
  game.state.start('dungeonThreeState');
}

var changeInventoryState = function(){
  game.cache.nextGameState = 'inventoryState';
  game.state.start('inventoryState');
}